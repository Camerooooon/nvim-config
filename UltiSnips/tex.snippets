global !p

# A overkill(dirty) table with automatic alignment feature
def create_table(snip):
	# retrieving single line from current string and treat it like tabstops count
	placeholders_string = snip.buffer[snip.line].strip()
	rows_amount = int(placeholders_string[0])
	columns_amount = int(placeholders_string[1])

	prefix_str = "from vimsnippets import display_width;"

	# erase current line
	snip.buffer[snip.line] = ""

	# create anonymous snippet with expected content and number of tabstops
	anon_snippet_title = "| "
	anon_snippet_delimiter = "|"
	for col in range(1, columns_amount+1):
		sync_rows = [x*columns_amount+col for x in range(rows_amount+1)]
		sync_str = ",".join(["t[{0}]".format(x) for x in sync_rows])
		max_width_str = "max(list(map(display_width, [" + sync_str + "])))"
		cur_width_str = "display_width(t[" + str(col) + "])"
		rv_val = "(" + max_width_str + "-" + cur_width_str + ")*' '"
		anon_snippet_title += "${" + str(col)  + ":head" + str(col)\
			+ "}`!p " + prefix_str + "snip.rv=" + rv_val + "` | "
		anon_snippet_delimiter += ":`!p " + prefix_str + "snip.rv = "\
			+ max_width_str + "*'-'" + "`-|"

	anon_snippet_title += "\n"

	anon_snippet_delimiter += "\n"
	anon_snippet_body = ""
	for row in range(1, rows_amount+1):
		body_row = "| "
		for col in range(1, columns_amount+1):
			sync_rows = [x*columns_amount+col for x in range(rows_amount+1)]
			sync_str = ",".join(["t[{0}]".format(x) for x in sync_rows])
			max_width_str = "max(list(map(display_width, [" + sync_str + "])))"
			cur_width_str = "display_width(t[" + str(row*columns_amount+col) + "])"
			rv_val = "(" + max_width_str + "-" + cur_width_str + ")*' '"
			placeholder = "R{0}C{1}".format(row, col)
			body_row += "${" + str(row*columns_amount+col)  + ":" + placeholder\
				+ "}`!p " + prefix_str + "snip.rv=" + rv_val + "` | "

		body_row += "\n"
		anon_snippet_body += body_row

	anon_snippet_table = anon_snippet_title + anon_snippet_delimiter + anon_snippet_body

	# expand anonymous snippet
	snip.expand_anon(anon_snippet_table)
endglobal

context "math()"
snippet @G "Gamma" iA
\Gamma
endsnippet

context "math()"
snippet @D "Delta" iA
\Delta
endsnippet

context "math()"
snippet @L "Lambda" iA
\Lambda
endsnippet

context "math()"
snippet @F "Phi" iA
\Phi
endsnippet

context "math()"
snippet @P "Pi" iA
\Pi
endsnippet

context "math()"
snippet @C "Psi" iA
\Psi
endsnippet

context "math()"
snippet @S "Sigma" iA
\Sigma
endsnippet

context "math()"
snippet @T "Theta" iA
\Theta
endsnippet

context "math()"
snippet @Y "Upsilon" iA
\Upsilon
endsnippet

context "math()"
snippet @J "Xi" iA
\Xi
endsnippet

context "math()"
snippet @V "Omega" iA
\Omega
endsnippet

context "math()"
snippet @a "alpha" iA
\alpha
endsnippet

context "math()"
snippet @b "beta" iA
\beta
endsnippet

context "math()"
snippet @g "gamma" iA
\gamma
endsnippet

context "math()"
snippet @d "delta" iA
\delta
endsnippet

context "math()"
snippet @e "epsilon" iA
\epsilon
endsnippet

context "math()"
snippet @z "zeta" iA
\zeta
endsnippet

context "math()"
snippet @h "eta" iA
\eta
endsnippet

context "math()"
snippet @t "theta" iA
\theta
endsnippet

context "math()"
snippet @i "iota" iA
\iota
endsnippet

context "math()"
snippet @k "kappa" iA
\kappa
endsnippet

context "math()"
snippet @l "lambda" iA
\lambda
endsnippet

context "math()"
snippet @m "mu" iA
\mu
endsnippet

context "math()"
snippet @n "nu" iA
\nu
endsnippet

context "math()"
snippet @j "xi" iA
\xi
endsnippet

context "math()"
snippet @p "pi" iA
\pi
endsnippet

context "math()"
snippet @r "rho" iA
\rho
endsnippet

context "math()"
snippet @s "sigma" iA
\sigma
endsnippet

context "math()"
snippet @t "tau" iA
\tau
endsnippet

context "math()"
snippet @y "upsilon" iA
\upsilon
endsnippet

context "math()"
snippet @f "phi" iA
\phi
endsnippet

context "math()"
snippet @x "chi" iA
\chi
endsnippet

context "math()"
snippet @c "psi" iA
\psi
endsnippet

context "math()"
snippet @o "omega" iA
\omega
endsnippet

context "math()"
snippet @dg "digamma" iA
\digamma
endsnippet

context "math()"
snippet @ve "varepsilon" iA
\varepsilon
endsnippet

context "math()"
snippet @vf "varphi" iA
\varphi
endsnippet

context "math()"
snippet @vp "varpi" iA
\varpi
endsnippet

context "math()"
snippet @vr "varrho" iA
\varrho
endsnippet

context "math()"
snippet @vs "varsigma" iA
\varsigma
endsnippet

context "math()"
snippet @vu "vartheta" iA
\vartheta
endsnippet
#-----------------------------------------------------------------------
#snippet () "left( right)" Ai
#(${1:${VISUAL}})
#endsnippet
#
#snippet [] "left[ right]" Ai
#[${1:${VISUAL}}]
#endsnippet
#
#snippet {} "left{ right}" Ai
#{${1:${VISUAL}}}
#endsnippet

# Not work
#snippet !\"\"! "left" right"" Air
#"${1:${VISUAL}}"
#endsnippet

#snippet || "left| right|" Ai
#|${1:${VISUAL}}|
#endsnippet
#
#snippet (] "left( right]" Ai
#(${1:${VISUAL}}]
#endsnippet
#
#snippet [) "left[ right)" Ai
#[${1:${VISUAL}})
#endsnippet

context "math()"
snippet "_($)?" "_left{ right}" Ar
_{${1:${VISUAL}}}
endsnippet

context "math()"
snippet "\^($)?" "^left{ right}" Ar
^{${1:${VISUAL}}}
endsnippet

snippet $ "left$ right$" Ai
$${1:${VISUAL}}$
endsnippet

#snippet "[^\\]\(" "left( right)" Air
#(${1:${VISUAL}})
#endsnippet

snippet \l( "left\( right\)" Ai
\left( ${1:${VISUAL}} \right)
endsnippet

snippet \{ "left\{ right\}" Ai
\\{${1:${VISUAL}}\\}
endsnippet

snippet \l[ "left\[ right\]" Ai
\\[ ${1:${VISUAL}} \\]
endsnippet

snippet \l| "left\| right\|" Ai
\left| ${1:${VISUAL}} \right|
endsnippet

snippet \l{ "left\{ right\}" Ai
\left\\{ ${1:${VISUAL}} \right\\}
endsnippet

# Some bug see \textLabel{
#snippet "[^\\_]\{" "left{ right}" Air
#{${1:${VISUAL}}} 
#endsnippet

snippet \[ "left\[ right\]" Ai
\[ ${1:${VISUAL}} \]
endsnippet

#snippet "[^\\][" "left[ right]" w
#\left[ ${1:${VISUAL}} \right]
#endsnippet

context "math()"
snippet norm "Norm" w
\norm{$1}
endsnippet

context "math()"
snippet lim "Limit" w
\lim_{$1\to $2}
endsnippet

context "math()"
snippet int "Integral" w
\int_{${1:0}}^{${2:\infty}} $3 \, dx
endsnippet

context "math()"
snippet sum "Sum" w
\sum_{${1:n=0}}^{${2:\infty}}
endsnippet

context "math()"
snippet prod "Product" w
\prod_{${1:1}}^{${2:\infty}}
endsnippet

context "math()"
snippet frac "Fraction" w
\frac{${1:${VISUAL:1}}}{${2:n}}
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

snippet sqrt "Sqrt" w
\sqrt{${1}}
endsnippet

# Not use
snippet par "partial" i
\partial
endsnippet

#snippet \Lap "Laplacian" i
#\triangle
#endsnippet

#snippet \dA "d'Alembertian" i
#\square
#endsnippet

snippet url "Url" w
\url{${1:${VISUAL}}}
endsnippet

snippet label "Label" i
\label{${1:${VISUAL}}}
endsnippet

snippet ref "Reference" w
\ref{${1:${VISUAL}}}
endsnippet

snippet em "Emphasis" w
\emph{${1:${VISUAL}}}
endsnippet

snippet tbf "Text boldface" w
\textbf{${1:${VISUAL}}}
endsnippet

snippet mbf "Math boldface" w
\mathbf{${1:${VISUAL}}}
endsnippet

snippet tit "Text italics" w
\textit{${1:${VISUAL}}}
endsnippet

snippet te "Text" w
\text{${1:${VISUAL}}}
endsnippet

snippet ol "Overline" w
\overline{ ${1:${VISUAL:1}} }
endsnippet

snippet ul "Underline" w
\\underline{${1:${VISUAL:1}}}$0
endsnippet

snippet us "Underset" w
\\underset{$2}{${1:${VISUAL:1}}}$0
endsnippet

snippet ub "Underbrace" w
\\underbrace{${1:${VISUAL:1}}}_{$2}$0
endsnippet

snippet ~~ "Aprox Equal"
\approx
endsnippet


snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

snippet beg "begin{} / end{}" bi
\begin{$1}
	$0
\end{$1}
endsnippet

snippet desc "Description" bi
\begin{description}
	\item[${1:${VISUAL}}] $0
\end{description}
endsnippet

snippet thrm "Theorem" bi
\begin{theorem}[$1]
	${0:${VISUAL}}
\end{theorem}
endsnippet

snippet enum "Enumerate" bi
\begin{enumerate}
	\item ${0:${VISUAL}}
\end{enumerate}
endsnippet

snippet item "Itemize" bi
\begin{itemize}
	\item ${0:${VISUAL}}
\end{itemize}
endsnippet

snippet def "Definition" bi
\begin{definition}[$1]
	${0:${VISUAL}}
\end{definition}
endsnippet

snippet tab "tabular / array environment" b
\begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}}
$0${2/(?<=.)(c|l|r)|./(?1: & )/g}
\end{$1${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'

endglobal
